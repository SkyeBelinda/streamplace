# Hi
swagger: '2.0'
info:
  title: Stream Kitchen API
  description: Want to do some stuff what with the streaming video? This is an API for that!
  version: "0.0.0-alpha1"
host: api.stream.kitchen
schemes:
  - https
basePath: /v0
produces:
  - application/json
consumes:
  - application/json

definitions:
  User:
    type: object
    additionalProperties: false
    required:
      - kind
      - authToken
      - handle
      - roles
    properties:
      kind:
        type: string
        allowedValues: ["User"]
      id:
        type: string
        description: Unique ID of user
      handle:
        type: string
        description: Human-readable name of user
      authToken:
        type: string
        description: Authentication token, probably from a JWT subfield
      roles:
        type: array
        description: What kind of things is this user?
        items:
          type: string
          allowedValues:
            - ADMIN
            - SERVICE

  Broadcast:
    type: object
    additionalProperties: false
    required: [kind, title, enabled, outputIds]
    properties:
      kind:
        type: string
        allowedValues: ["Broadcast"]
      id:
        type: string
        description: Unique ID of the Broadcast
      title:
        type: string
        description: Human-reaadable name of the broadcast
      activeSceneId:
        type: string
        description: Which scene is currently active on this broadcast?
      enabled:
        type: boolean
        description: Is this broadcast currently running?
      outputIds:
        type: array
        description: To which outputs should we be forwarding?
        items:
          type: string

  Vertex:
    type: object
    additionalProperties: false
    required: [kind, title, type, image]
    properties:
      kind:
        type: string
        allowedValues: ["Vertex"]
      id:
        type: string
        description: Unique ID of the Vertex
      title:
        type: string
        description: Human-readable title of this vertex
      type:
        description: The type of vertex that this is
        enum: ["RTMPInput", "RTMPOutput", "FileOutput", "Composite", "Autosync"]
      rtmp:
        type: object
        description: RTMP information for RTMPInput and RTMPOutput streams
        properties:
          url:
            type: string
            description: RTMP URL
      image:
        type: string
        description: Docker image that this vertex should pull
      broadcastId:
        type: string
        description: Broadcast ID that owns this vertex, if any
      status:
        type: string
        description: Current status of this vertex
        enum: [INACTIVE, WAITING, CODEC, ACTIVE]
      params:
        type: object
        description: Type-specific vertex parameters
      inputs:
        type: array
        description: Inputs provided by this vertex
        items:
          type: object
      outputs:
        type: array
        description: Outputs provided by this vertex
        items:
          type: object
      timemark:
        type: string
        description: |
          Current timestamp of this vertex in 00:00:00 format. Use syncStartTime for anything more
          complicated than that.
      syncStartTime:
        type: number
        description: Unix epoch time of the first PTS of this input.

  Arc:
    type: object
    additionalProperties: false
    properties:
      kind:
        type: string
        allowedValues: ["Arc"]
      id:
        type: string
        description: Unique ID of the Arc
      broadcastId:
        type: string
        description: Broadcast this arc belongs to, if any
      from:
        type: object
        additionalProperties: false
        required: [vertexId, ioName]
        properties:
          vertexId:
            type: string
            description: ID of the vertex where this arc starts
          ioName:
            type: string
            description: Name of the Vertex's output that we're connecting to
      to:
        type: object
        additionalProperties: false
        properties:
          vertexId:
            type: string
            description: ID of the vertex where this arc starts
          ioName:
            type: string
            description: Name of the Vertex's output that we're connecting to

  Input:
    type: object
    additionalProperties: false
    required: ["kind", "title", "overlayKey", "streamKey"]
    properties:
      id:
        type: string
        description: Unique ID of the input
        readOnly: true
      kind:
        type: string
        allowedValues: ["Input"]
      title:
        type: string
        description: Human-readable name of this input
        minLength: 1
      overlayKey:
        $ref: "SecretKey"
      streamKey:
        $ref: "SecretKey"
      nextSync:
        type: number

  Output:
    type: object
    additionalProperties: false
    properties:
      kind:
        type: string
        allowedValues: ["output"]
      id:
        type: string
        description: Unique ID of the output

  Scene:
    type: object
    additionalProperties: false
    required: ["broadcastId", "title", "height", "width"]
    properties:
      id:
        type: string
        description: Unique ID of the scene
      kind:
        type: string
        allowedValues: ["Scene"]
      title:
        type: string
        description: Human-readable name of this scene
        minLength: 1
      broadcastId:
        type: string
        description: ID of the broadcast where this scene exists
      height:
        type: number
        allowedValues: [1080]
        description: Height of this scene, in pixels
      width:
        type: number
        allowedValues: [1920]
        description: Width of this scene, in pixels
      regions:
        type: array
        items:
          type: object
          additionalProperties: false
          required: ["inputId", "x", "y", "width", "height"]
          properties:
            inputId:
              type: string
              description: Input to which this region cooresponds
            x:
              type: number
              description: Horizontal location of this region in pixels
            y:
              type: number
              description: Vertical location of this region in pixels
            width:
              type: number
              description: Width of this region in pixels
            height:
              type: number
              description: Height of this region in pixels

  SecretKey:
    type: string
    readOnly: true
    description: A secret key, used in things like RTMP urls.

  Error:
    type: object
    additionalProperties: false
    description: Something went wrong. This little guy tells you so.
    properties:
      message:
        type: string
      code:
        type: string


paths:

  ##############
  # Broadcasts #
  ##############

  /broadcasts:
    get:
      summary: Get many broadcasts
      description: TODO - Describe what broadcasts is
      tags: ["broadcasts"]
      operationId: findBroadcasts
      parameters:
        - name: filter
          in: query
          description: Optional JSON string. Return only documents that match.
          required: false
          type: string
      responses:
        200:
          description: An array of broadcasts
          schema:
            type: array
            items:
              $ref: '#/definitions/Broadcast'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a broadcast
      tags: ["broadcasts"]
      operationId: createBroadcasts
      parameters:
        - description: Broadcast to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Broadcast"
      responses:
        201:
          description: Creation Sucessful
          schema:
            $ref: "#/definitions/Broadcast"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /broadcasts/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Get one broadcast
      description: TODO - Describe what broadcasts is
      tags: ["broadcasts"]
      operationId: findOneBroadcasts
      responses:
        200:
          description: An array of broadcasts
          schema:
            type: array
            items:
              $ref: '#/definitions/Broadcast'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Modify an existing broadcast
      tags: ["broadcasts"]
      operationId: updateBroadcasts
      parameters:
        - description: Broadcast to Modify
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Broadcast"
        - name: id
          in: path
          type: string
          description: what
          required: true
      responses:
        200:
          description: Modification Sucessful
          schema:
            $ref: "#/definitions/Broadcast"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Delete an existing broadcast and everything in it!!!
      tags: ["broadcasts"]
      operationId: deleteBroadcasts
      responses:
        204:
          description: "You did it, it's gone"

  #########
  # Users #
  #########

  /users:
    get:
      summary: Get many users
      description: TODO - Describe what users is
      tags: ["users"]
      operationId: findUsers
      parameters:
        - name: filter
          in: query
          description: Optional JSON string. Return only documents that match.
          required: false
          type: string
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a user
      tags: ["users"]
      operationId: createUsers
      parameters:
        - description: User to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Creation Sucessful
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Get one user
      description: TODO - Describe what users is
      tags: ["users"]
      operationId: findOneUsers
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Modify an existing user
      tags: ["users"]
      operationId: updateUsers
      parameters:
        - description: User to Modify
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/User"
        - name: id
          in: path
          type: string
          description: what
          required: true
      responses:
        200:
          description: Modification Sucessful
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Delete a user
      tags: ["users"]
      operationId: deleteUsers
      responses:
        204:
          description: "You did it, it's gone"

  ##########
  # Inputs #
  ##########

  /inputs:
    get:
      summary: Get many inputs
      description: TODO - Describe what inputs is
      tags: ["inputs"]
      operationId: findInputs
      parameters:
        - name: filter
          in: query
          description: Optional JSON string. Return only documents that match.
          required: false
          type: string
      responses:
        200:
          description: An array of inputs
          schema:
            type: array
            items:
              $ref: '#/definitions/Input'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create an input
      tags: ["inputs"]
      operationId: createInputs
      parameters:
        - description: Input to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Input"
      responses:
        201:
          description: Creation Sucessful
          schema:
            $ref: "#/definitions/Input"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /inputs/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Get one input
      description: TODO - Describe what inputs is
      tags: ["inputs"]
      operationId: findOneInputs
      responses:
        200:
          description: An array of inputs
          schema:
            type: array
            items:
              $ref: '#/definitions/Input'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Modify an existing input
      tags: ["inputs"]
      operationId: updateInputs
      parameters:
        - description: Input to Modify
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Input"
        - name: id
          in: path
          type: string
          description: what
          required: true
      responses:
        200:
          description: Modification Sucessful
          schema:
            $ref: "#/definitions/Input"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Delete an existing input
      tags: ["inputs"]
      operationId: deleteInputs
      responses:
        204:
          description: "You did it, it's gone"

  ###########
  # Outputs #
  ##########

  /outputs:
    get:
      summary: Get many outputs
      description: TODO - Describe what outputs is
      tags: ["outputs"]
      operationId: findOutputs
      parameters:
        - name: filter
          in: query
          description: Optional JSON string. Return only documents that match.
          required: false
          type: string
      responses:
        200:
          description: An array of outputs
          schema:
            type: array
            items:
              $ref: '#/definitions/Output'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create an output
      tags: ["outputs"]
      operationId: createOutputs
      parameters:
        - description: Output to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Output"
      responses:
        201:
          description: Creation Sucessful
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /outputs/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Get one output
      description: TODO - Describe what outputs is
      tags: ["outputs"]
      operationId: findOneOutputs
      responses:
        200:
          description: An array of outputs
          schema:
            type: array
            items:
              $ref: '#/definitions/Output'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Modify an existing output
      tags: ["outputs"]
      operationId: updateOutputs
      parameters:
        - description: Output to Modify
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Output"
        - name: id
          in: path
          type: string
          description: what
          required: true
      responses:
        200:
          description: Modification Sucessful
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Delete an existing output
      tags: ["outputs"]
      operationId: deleteOutputs
      responses:
        204:
          description: "You did it, it's gone"

  ##########
  # Scenes #
  ##########

  /scenes:
    get:
      summary: Get many scenes
      description: TODO - Describe what scenes is
      tags: ["scenes"]
      operationId: findScenes
      parameters:
        - name: filter
          in: query
          description: Optional JSON string. Return only documents that match.
          required: false
          type: string
      responses:
        200:
          description: An array of scenes
          schema:
            type: array
            items:
              $ref: '#/definitions/Scene'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create an scene
      tags: ["scenes"]
      operationId: createScenes
      parameters:
        - description: Scene to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Scene"
      responses:
        201:
          description: Creation Sucessful
          schema:
            $ref: "#/definitions/Scene"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scenes/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Get one scene
      description: TODO - Describe what scenes is
      tags: ["scenes"]
      operationId: findOneScenes
      responses:
        200:
          description: An array of scenes
          schema:
            type: array
            items:
              $ref: '#/definitions/Scene'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Modify an existing scene
      tags: ["scenes"]
      operationId: updateScenes
      parameters:
        - description: Scene to Modify
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Scene"
        - name: id
          in: path
          type: string
          description: what
          required: true
      responses:
        200:
          description: Modification Sucessful
          schema:
            $ref: "#/definitions/Scene"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      parameters:
        - name: id
          in: path
          type: string
          description: what
          required: true
      summary: Delete an existing scene
      tags: ["scenes"]
      operationId: deleteScenes
      responses:
        204:
          description: "You did it, it's gone"

  ############
  # vertices #
  ############

  /vertices:
    get:
      summary: Get many vertices
      description: TODO - Describe what a vertex is
      tags: ["vertices"]
      operationId: findVertices
      parameters:
        - name: filter
          in: query
          description: Optional JSON string. Return only documents that match.
          required: false
          type: string
      responses:
        200:
          description: An array of vertices
          schema:
            type: array
            items:
              $ref: '#/definitions/Vertex'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a broadcast
      tags: ["vertices"]
      operationId: createVertices
      parameters:
        - description: Broadcast to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Vertex"
      responses:
        201:
          description: Creation Sucessful
          schema:
            $ref: "#/definitions/Vertex"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /vertices/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          required: true
      summary: Get one vertex
      tags: ["vertices"]
      operationId: findOneVertices
      description: TODO - Describe what vertices is
      responses:
        200:
          description: An array of vertices
          schema:
            type: array
            items:
              $ref: '#/definitions/Vertex'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Modify an existing vertex
      tags: ["vertices"]
      operationId: updateVertices
      parameters:
        - name: id
          in: path
          type: string
          required: true
        - description: Vertex to Modify
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Vertex"
      responses:
        200:
          description: Modification Sucessful
          schema:
            $ref: "#/definitions/Vertex"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      parameters:
        - name: id
          in: path
          type: string
          required: true
      summary: Delete an existing vertex
      tags: ["vertices"]
      operationId: deleteVertices
      responses:
        204:
          description: "You did it, it's gone"

  ########
  # Arcs #
  ########

  /arcs:
    get:
      summary: Get many arcs
      description: TODO - Describe what a vertex is
      tags: ["arcs"]
      operationId: findArcs
      parameters:
        - name: filter
          in: query
          description: Optional JSON string. Return only documents that match.
          required: false
          type: string
      responses:
        200:
          description: An array of arcs
          schema:
            type: array
            items:
              $ref: '#/definitions/Arc'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a broadcast
      tags: ["arcs"]
      operationId: createArcs
      parameters:
        - description: Broadcast to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Arc"
      responses:
        201:
          description: Creation Sucessful
          schema:
            $ref: "#/definitions/Arc"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /arcs/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          required: true
      summary: Get one arc
      description: TODO - Describe what arcs is
      tags: ["arcs"]
      operationId: findOneArcs
      responses:
        200:
          description: An array of arcs
          schema:
            type: array
            items:
              $ref: '#/definitions/Arc'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Modify an existing arc
      tags: ["arcs"]
      operationId: updateArcs
      parameters:
        - name: id
          in: path
          type: string
          required: true
        - description: Arc to Modify
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Arc"
      responses:
        200:
          description: Modification Sucessful
          schema:
            $ref: "#/definitions/Arc"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      parameters:
        - name: id
          in: path
          type: string
          required: true
      tags: ["arcs"]
      operationId: deleteArcs
      summary: Delete an existing arc
      responses:
        204:
          description: "You did it, it's gone"

